import os
import json
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)
import xui_api
from database import Database

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('vpn_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    with open('config.json') as f:
        config = json.load(f)
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ X-UI API
try:
    db = Database('vpn_bot.db')
    xui = xui_api.XUIAPI(
        config['XUI_PANEL_URL'],
        config['XUI_USERNAME'],
        config['XUI_PASSWORD'],
        config.get('XUI_API_PREFIX', '')
    )
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ X-UI API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    logger.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    raise

def get_main_keyboard(user_id: int):
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help_menu")]
    ]
    if str(user_id) in config['ADMIN_IDS']:
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")])
    return InlineKeyboardMarkup(keyboard)

def append_back_button(keyboard):
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")])
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if not db.user_exists(user_id):
        if not xui.check_connection():
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É VPN")
            return

        result = xui.create_user(
            remark=f"user_{user_id}",
            traffic_gb=config['TRIAL_TRAFFIC_GB'],
            expire_days=config['TRIAL_DAYS']
        )

        if not result:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN-–ø—Ä–æ—Ñ–∏–ª—è")
            return

        uuid, port = result
        db.create_user(
            user_id=user_id,
            username=user.username,
            uuid=uuid,
            traffic_limit=config['TRIAL_TRAFFIC_GB'] * 1024 ** 3,
            expire_date=(datetime.now() + timedelta(days=config['TRIAL_DAYS'])).strftime('%Y-%m-%d')
        )
        config_link = xui.generate_config(uuid, port)
        await update.message.reply_text(
            f"üéâ –í–∞—à VPN-–¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

"
            f"üîë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
<code>{config_link}</code>",
            parse_mode="HTML"
        )
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = db.get_user(user_id)
    if not user_data:
        await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    if not user_data['is_active']:
        await update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        return

    expire_date = datetime.strptime(user_data['expire_date'], '%Y-%m-%d')
    remaining_days = max(0, (expire_date - datetime.now()).days)
    remaining_traffic_gb = max(0, (user_data['traffic_limit'] - user_data['traffic_used']) // (1024 ** 3))

    keyboard = get_main_keyboard(user_id)
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!

"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}
"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–∞—Ñ–∏–∫–∞: {remaining_traffic_gb} –ì–ë

"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=keyboard)
    else:
        await update.message.reply_text(text, reply_markup=keyboard)

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await show_main_menu(update, context)

async def renew(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("+30 –¥–Ω–µ–π +40 –ì–ë", callback_data="renew_basic")]
    ]
    reply_markup = append_back_button(keyboard)
    await query.edit_message_text("üéÅ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)

async def renew_basic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_data = db.get_user(user_id)
    if not user_data:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    expire_date = datetime.strptime(user_data['expire_date'], '%Y-%m-%d')
    new_expire = expire_date + timedelta(days=30)
    new_traffic = user_data['traffic_limit'] + 40 * 1024**3
    db.update_user(user_id, traffic_limit=new_traffic, expire_date=new_expire.strftime('%Y-%m-%d'))
    xui.update_user(uuid=user_data['uuid'], traffic_gb=new_traffic // (1024**3), expire_days=30)

    await query.edit_message_text(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!

"
        f"üìÖ –î–æ: {new_expire.strftime('%d.%m.%Y')}
"
        f"üì∂ –¢—Ä–∞—Ñ–∏–∫: {new_traffic // (1024**3)} –ì–ë"
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_data = db.get_user(user_id)
    if not user_data:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    expire_date = datetime.strptime(user_data['expire_date'], '%Y-%m-%d')
    remaining_days = (expire_date - datetime.now()).days
    traffic_used = user_data['traffic_used'] // (1024 ** 3)
    traffic_limit = user_data['traffic_limit'] // (1024 ** 3)

    await query.edit_message_text(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

"
        f"üÜî @{user_data['username']}
"
        f"üìÖ –î–æ: {expire_date.strftime('%d.%m.%Y')} ({remaining_days} –¥–Ω.)
"
        f"üì∂ –¢—Ä–∞—Ñ–∏–∫: {traffic_used}/{traffic_limit} –ì–ë"
    )

def main():
    application = ApplicationBuilder().token(config['BOT_TOKEN']).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_menu$"))
    application.add_handler(CallbackQueryHandler(renew, pattern="^renew$"))
    application.add_handler(CallbackQueryHandler(renew_basic, pattern="^renew_basic$"))
    application.add_handler(CallbackQueryHandler(stats, pattern="^stats$"))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()