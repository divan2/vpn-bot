import os
import json
import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
import xui_api
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.json') as f:
    config = json.load(f)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ X-UI API
db = Database('vpn_bot.db')
xui = xui_api.XUIAPI(config['XUI_PANEL_URL'], config['XUI_USERNAME'], config['XUI_PASSWORD'])

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_TRAFFIC, SET_DAYS = range(2)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not db.user_exists(user_id):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        uuid = xui.create_user(
            remark=f"user_{user_id}",
            traffic_gb=config['TRIAL_TRAFFIC_GB'],
            expire_days=config['TRIAL_DAYS']
        )

        db.create_user(
            user_id=user_id,
            username=user.username,
            uuid=uuid,
            traffic_limit=config['TRIAL_TRAFFIC_GB'] * 1024 ** 3,
            expire_date=(datetime.now() + timedelta(days=config['TRIAL_DAYS'])).strftime('%Y-%m-%d')
        )

        await update.message.reply_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:\n"
            f"‚Ä¢ {config['TRIAL_DAYS']} –¥–Ω–µ–π\n"
            f"‚Ä¢ {config['TRIAL_TRAFFIC_GB']} –ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞\n\n"
            "–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è..."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        config_link = xui.generate_config(uuid)
        await update.message.reply_text(
            f"üîë –í–∞—à –∫–æ–Ω—Ñ–∏–≥:\n`{config_link}`\n\n"
            "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: /help",
            parse_mode="Markdown"
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await show_main_menu(update, context)


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = db.get_user(user_id)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
    expire_date = datetime.strptime(user_data['expire_date'], '%Y-%m-%d')
    remaining_days = (expire_date - datetime.now()).days
    remaining_days = max(0, remaining_days)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç—Ä–∞—Ñ–∏–∫
    remaining_traffic_gb = max(0, (user_data['traffic_limit'] - user_data['traffic_used']) // (1024 ** 3))

    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help_menu")]
    ]

    # –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    if str(user_id) in config['ADMIN_IDS']:
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–∞—Ñ–∏–∫–∞: {remaining_traffic_gb} –ì–ë\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–∞—Ñ–∏–∫–∞: {remaining_traffic_gb} –ì–ë\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )


async def renew_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("+30 –¥–Ω–µ–π +40 –ì–ë", callback_data="renew_basic")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_menu")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üéÅ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è:\n\n"
        "1. –ë–∞–∑–æ–≤—ã–π: +30 –¥–Ω–µ–π –∏ +40 –ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=reply_markup
    )


async def renew_basic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_data = db.get_user(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    expire_date = datetime.strptime(user_data['expire_date'], '%Y-%m-%d')
    new_expire_date = expire_date + timedelta(days=30)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞
    new_traffic_limit = user_data['traffic_limit'] + 40 * 1024 ** 3

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
    db.update_user(
        user_id=user_id,
        traffic_limit=new_traffic_limit,
        expire_date=new_expire_date.strftime('%Y-%m-%d')
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ X-UI
    xui.update_user(
        uuid=user_data['uuid'],
        traffic_gb=new_traffic_limit // (1024 ** 3),
        expire_days=(new_expire_date - datetime.now()).days
    )

    await query.edit_message_text(
        "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n"
        f"‚Ä¢ –ù–æ–≤—ã–π —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_expire_date.strftime('%d.%m.%Y')}\n"
        f"‚Ä¢ –ù–æ–≤—ã–π —Ç—Ä–∞—Ñ–∏–∫: {new_traffic_limit // (1024 ** 3)} –ì–ë"
    )


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_data = db.get_user(user_id)

    expire_date = datetime.strptime(user_data['expire_date'], '%Y-%m-%d')
    remaining_days = (expire_date - datetime.now()).days
    remaining_traffic_gb = (user_data['traffic_limit'] - user_data['traffic_used']) // (1024 ** 3))

    await query.edit_message_text(
    f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    f"‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_data['username']}\n"
    f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['created_at']}\n"
    f"‚Ä¢ –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {expire_date.strftime('%d.%m.%Y')} ({remaining_days} –¥–Ω.)\n"
    f"‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {user_data['traffic_used'] // (1024 ** 3)}/{user_data['traffic_limit'] // (1024 ** 3)} –ì–ë\n"
    f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if user_data['is_active'] else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}"

)

async

def show_help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üì± Android", callback_data="help_android")],
        [InlineKeyboardButton("üíª Windows", callback_data="help_windows")],
        [InlineKeyboardButton("üçé iOS", callback_data="help_ios")],
        [InlineKeyboardButton("üêß Linux/Mac", callback_data="help_linux")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_menu")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:",
        reply_markup=reply_markup
    )


async def help_android(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android:</b>\n\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>Nekobox</b> –∏–∑ Play Market:\n"
        "   <a href='https://play.google.com/store/apps/details?id=com.yakovlev.v2ray'>–°–∫–∞—á–∞—Ç—å Nekobox</a>\n\n"
        "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ <b>+</b> –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ <b>'–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'</b>\n"
        "4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à –∫–æ–Ω—Ñ–∏–≥ (–∫–æ–º–∞–Ω–¥–∞ /start)\n"
        "5. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
        "6. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
        "<b>–í–∞–∂–Ω–æ!</b> –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ —Ç—Ä–∞—Ñ–∏–∫ –Ω–µ –∏–¥–µ—Ç:\n"
        "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Ä–µ–º—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n"
        "- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–∏–ø —Å–µ—Ç–∏ (WiFi/4G)\n"
        "- –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        parse_mode="HTML",
        disable_web_page_preview=True
    )


async def help_windows(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "üíª <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows:</b>\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ <b>Nekoray</b>:\n"
        "   <a href='https://github.com/MatsuriDayo/nekoray/releases'>–°–∫–∞—á–∞—Ç—å Nekoray</a>\n\n"
        "2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ <b>nekoray.exe</b>\n"
        "3. –í –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ –Ω–∞–∂–º–∏—Ç–µ <b>Add</b> ‚ûï\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ <b>'From Clipboard'</b>\n"
        "5. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à –∫–æ–Ω—Ñ–∏–≥ (–∫–æ–º–∞–Ω–¥–∞ /start)\n"
        "6. –ù–∞–∂–º–∏—Ç–µ <b>OK</b>, –∑–∞—Ç–µ–º –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –∫–æ–Ω—Ñ–∏–≥–µ ‚Üí <b>Start</b>\n\n"
        "<b>–°–æ–≤–µ—Ç:</b> –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–æ–±–∞–≤—å—Ç–µ Nekoray –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É",
        parse_mode="HTML",
        disable_web_page_preview=True
    )


async def help_ios(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "üçé <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iOS:</b>\n\n"
        "1. –¢—Ä–µ–±—É–µ—Ç—Å—è <b>–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π Apple ID</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–®–ê)\n"
        "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>Shadowrocket</b> –∏–∑ AppStore:\n"
        "   <a href='https://apps.apple.com/us/app/shadowrocket/id932747118'>–°–∫–∞—á–∞—Ç—å Shadowrocket</a>\n\n"
        "3. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ <b>+</b> –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ <b>'Subscribe'</b>\n"
        "5. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –±–æ—Ç–∞ (–∫–æ–º–∞–Ω–¥–∞ /start)\n"
        "6. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º\n\n"
        "<b>–í–∞–∂–Ω–æ!</b> –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
        "- –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Shadowrocket ‚Üí Local DNS ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ 'Disable'\n"
        "- –í–∫–ª—é—á–∏—Ç–µ 'Bypass LAN' –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö",
        parse_mode="HTML",
        disable_web_page_preview=True
    )


async def help_linux(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "üêß <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Linux/Mac:</b>\n\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>Qv2ray</b>:\n"
        "   <a href='https://github.com/Qv2ray/Qv2ray/releases'>–°–∫–∞—á–∞—Ç—å Qv2ray</a>\n\n"
        "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ <b>Add</b> ‚ûï\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ <b>'From Clipboard'</b>\n"
        "4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à –∫–æ–Ω—Ñ–∏–≥ (–∫–æ–º–∞–Ω–¥–∞ /start)\n"
        "5. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –∏ –Ω–∞–∂–º–∏—Ç–µ <b>Connect</b>\n\n"
        "<b>–î–ª—è MacOS:</b> –í–º–µ—Å—Ç–æ Qv2ray –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <b>V2RayU</b>:\n"
        "<a href='https://github.com/yanue/V2rayU/releases'>–°–∫–∞—á–∞—Ç—å V2RayU</a>",
        parse_mode="HTML",
        disable_web_page_preview=True
    )


async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if str(user_id) not in config['ADMIN_IDS']:
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", callback_data="server_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_menu")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=reply_markup
    )


async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    users = db.get_all_users()
    if not users:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    message = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        expire_date = datetime.strptime(user['expire_date'], '%Y-%m-%d')
        remaining_days = (expire_date - datetime.now()).days
        message += f"‚Ä¢ @{user['username']} | üïí {remaining_days}–¥ | üìä {user['traffic_used'] // 1024 ** 3}/{user['traffic_limit'] // 1024 ** 3}–ì–ë\n"

    await query.edit_message_text(message)


async def server_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
    stats = xui.get_server_stats()

    await query.edit_message_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:\n\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(db.get_all_users())}\n"
        f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ CPU: {stats['cpu']}%\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ RAM: {stats['ram']}%\n"
        f"‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: ‚Üë{stats['upload']:.2f}GB ‚Üì{stats['download']:.2f}GB\n\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {stats['connections']}"
    )


async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await show_main_menu(update, context)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    keyboard = [
        [InlineKeyboardButton("üì± Android", callback_data="help_android")],
        [InlineKeyboardButton("üíª Windows", callback_data="help_windows")],
        [InlineKeyboardButton("üçé iOS", callback_data="help_ios")],
        [InlineKeyboardButton("üêß Linux/Mac", callback_data="help_linux")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:",
        reply_markup=reply_markup
    )


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    user_id = update.effective_user.id
    if str(user_id) not in config['ADMIN_IDS']:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", callback_data="server_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=reply_markup
    )


def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(config['BOT_TOKEN']).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("admin", admin_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(renew_subscription, pattern="^renew$"))
    application.add_handler(CallbackQueryHandler(renew_basic, pattern="^renew_basic$"))
    application.add_handler(CallbackQueryHandler(show_stats, pattern="^stats$"))
    application.add_handler(CallbackQueryHandler(show_help_menu, pattern="^help_menu$"))
    application.add_handler(CallbackQueryHandler(admin_menu, pattern="^admin_menu$"))
    application.add_handler(CallbackQueryHandler(list_users, pattern="^list_users$"))
    application.add_handler(CallbackQueryHandler(server_stats, pattern="^server_stats$"))
    application.add_handler(CallbackQueryHandler(help_android, pattern="^help_android$"))
    application.add_handler(CallbackQueryHandler(help_windows, pattern="^help_windows$"))
    application.add_handler(CallbackQueryHandler(help_ios, pattern="^help_ios$"))
    application.add_handler(CallbackQueryHandler(help_linux, pattern="^help_linux$"))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_menu$"))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()